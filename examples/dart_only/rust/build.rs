use std::{env, path::PathBuf};

fn main() {
    create_c_to_rust_bindings();
    build_c_library();
    create_rust_to_dart_bindings();
}

fn create_c_to_rust_bindings() {
    let bindings = bindgen::builder()
        .header("c/c_add.h")
        .generate()
        .expect("Unable to generate bindings");

    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
    bindings
        .write_to_file(out_path.join("bindings.rs"))
        .expect("Unable to write bindings");
}

fn build_c_library() {
    println!("cargo:rerun-if-changed=c/c_add.h");
    println!("cargo:rerun-if-changed=c/c_add.c");

    cc::Build::new()
        .file("c/c_add.c")
        .include("c")
        .compile("c_add");

    println!("cargo:rustc-link-lib=static=c_add");
}

fn create_rust_to_dart_bindings() {
    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();

    cbindgen::Builder::new()
        .with_crate(crate_dir)
        .with_language(cbindgen::Language::C)
        .with_autogen_warning(
            "/*
This file is automatically generated by build.rs; DO NOT MANUALLY EDIT!
This header is designed to be consumed by ffigen over on the Dart side.
*/",
        )
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file("bindings.h");
}
